import yt_dlp
import time
from threading import Thread


class DynamicThreadOptimizer:
    def __init__(self, url, max_threads=16, min_threads=1):
        self.url = url
        self.max_threads = max_threads
        self.min_threads = min_threads
        self.best_threads = min_threads
        self.speed_history = []
        self.stop_optimization = False

    def optimize_threads(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
        while not self.stop_optimization:
            time.sleep(2)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã

            if len(self.speed_history) < 2:
                continue

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
            current_speed = self.speed_history[-1]
            previous_speed = self.speed_history[-2]

            # –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å —É–ø–∞–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 10%, —É–º–µ–Ω—å—à–∞–µ–º –ø–æ—Ç–æ–∫–∏
            if current_speed < previous_speed * 0.9 and self.best_threads > self.min_threads:
                self.best_threads -= 1
                print(f"‚è¨ –°–Ω–∏–∂–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–æ {self.best_threads}")
            # –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ 10%, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
            elif current_speed > previous_speed * 1.1 and self.best_threads < self.max_threads:
                self.best_threads += 1
                print(f"‚è´ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–æ {self.best_threads}")

    def download_video(self):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–æ—Ç–æ–∫–æ–≤."""
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        optimizer_thread = Thread(target=self.optimize_threads)
        optimizer_thread.start()

        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ
        format_options = self.get_best_format()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        options = {
            'format': format_options,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            'merge_output_format': 'mp4',
            'outtmpl': '%(title)s.%(ext)s',
            'n_threads': self.best_threads,
            'http_chunk_size': 1048576,  # 1 MB
            'fragment_retries': 10,
            'no_check_certificate': True,
            'progress_hooks': [self.progress_hook]
        }

        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å {self.best_threads} –ø–æ—Ç–æ–∫–∞–º–∏...")

        try:
            with yt_dlp.YoutubeDL(options) as ydl:
                ydl.download([self.url])
                self.stop_optimization = True  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
                optimizer_thread.join()
                print("‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        except Exception as e:
            self.stop_optimization = True
            optimizer_thread.join()
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    def get_best_format(self):
        """–í—ã–±–∏—Ä–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ."""
        try:
            ydl = yt_dlp.YoutubeDL()
            info = ydl.extract_info(self.url, download=False)

            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
            video_format = max(
                (f for f in info['formats'] if f['vcodec'] != 'none'),
                key=lambda x: (x.get('height', 0), x.get('fps', 0))
            )

            # –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
            audio_format = max(
                (f for f in info['formats'] if f['acodec'] != 'none'),
                key=lambda x: x.get('abr', 0)
            )

            print(f"üé• –í–∏–¥–µ–æ: {video_format['format_id']} ({video_format['height']}p)")
            print(f"üéß –ê—É–¥–∏–æ: {audio_format['format_id']} ({audio_format['abr']} kbps)")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏
            return f"{video_format['format_id']}+{audio_format['format_id']}"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–æ—Ä–º–∞—Ç–∞: {e}")
            return 'bestvideo+bestaudio/best'

    def progress_hook(self, d):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏."""
        if d['status'] == 'downloading':
            speed_str = d['_speed_str'].strip()
            percent = d['_percent_str'].strip()

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ –±–∞–π—Ç—ã
            speed = self.parse_speed(speed_str)
            self.speed_history.append(speed)

            print(f"[{self.best_threads} –ø–æ—Ç–æ–∫–æ–≤] –ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}, –°–∫–æ—Ä–æ—Å—Ç—å: {speed_str}")

    def parse_speed(self, speed_str):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ –±–∞–π—Ç—ã."""
        try:
            if 'KiB/s' in speed_str:
                return float(speed_str.replace('KiB/s', '').strip()) * 1024
            elif 'MiB/s' in speed_str:
                return float(speed_str.replace('MiB/s', '').strip()) * 1024 * 1024
            elif 'GiB/s' in speed_str:
                return float(speed_str.replace('GiB/s', '').strip()) * 1024 * 1024 * 1024
            else:
                return 0
        except:
            return 0


if __name__ == "__main__":
    import sys
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python main.py <URL>")
    else:
        url = sys.argv[1]
        optimizer = DynamicThreadOptimizer(url)
        optimizer.download_video()



### auto threads

# import yt_dlp
# import time
# from threading import Thread
# from queue import Queue


# class DynamicThreadOptimizer:
#     def __init__(self, url, max_threads=16, min_threads=1):
#         self.url = url
#         self.max_threads = max_threads
#         self.min_threads = min_threads
#         self.best_threads = min_threads
#         self.speed_history = []
#         self.last_speed = 0
#         self.stop_optimization = False

#     def optimize_threads(self):
#         """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤ –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏."""
#         while not self.stop_optimization:
#             time.sleep(2)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

#             if len(self.speed_history) < 2:
#                 continue

#             # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
#             current_speed = self.speed_history[-1]
#             previous_speed = self.speed_history[-2]

#             # –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å —É–ø–∞–ª–∞ ‚Äî —É–º–µ–Ω—å—à–∞–µ–º –ø–æ—Ç–æ–∫–∏
#             if current_speed < previous_speed * 0.9 and self.best_threads > self.min_threads:
#                 self.best_threads -= 1
#                 print(f"–°–Ω–∏–∂–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–æ {self.best_threads}")
#             # –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
#             elif current_speed > previous_speed * 1.1 and self.best_threads < self.max_threads:
#                 self.best_threads += 1
#                 print(f"–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–æ {self.best_threads}")

#     def download_video(self):
#         """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–æ—Ç–æ–∫–æ–≤."""
#         # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
#         optimizer_thread = Thread(target=self.optimize_threads)
#         optimizer_thread.start()

#         options = {
#             'format': 'bestvideo+bestaudio/best',
#             'merge_output_format': 'mp4',
#             'outtmpl': '%(title)s.%(ext)s',
#             'n_threads': self.best_threads,
#             'http_chunk_size': 1048576,  # 1 MB
#             'fragment_retries': 10,
#             'no_check_certificate': True,
#             'progress_hooks': [self.progress_hook]
#         }

#         try:
#             with yt_dlp.YoutubeDL(options) as ydl:
#                 ydl.download([self.url])
#                 self.stop_optimization = True  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
#                 optimizer_thread.join()
#                 print("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
#         except Exception as e:
#             self.stop_optimization = True
#             optimizer_thread.join()
#             print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

#     def progress_hook(self, d):
#         """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –∑–∞–ø–∏—Å—å —Å–∫–æ—Ä–æ—Å—Ç–∏."""
#         if d['status'] == 'downloading':
#             speed_str = d['_speed_str'].strip()
#             percent = d['_percent_str'].strip()

#             # –ü–∞—Ä—Å–∏–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–≤ –±–∞–π—Ç–∞—Ö)
#             speed = self.parse_speed(speed_str)
#             self.speed_history.append(speed)

#             print(f"[{self.best_threads} –ø–æ—Ç–æ–∫–æ–≤] –ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}, –°–∫–æ—Ä–æ—Å—Ç—å: {speed_str}")

#     def parse_speed(self, speed_str):
#         """–ü–∞—Ä—Å–∏–Ω–≥ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '1.23MiB/s')."""
#         try:
#             if 'KiB/s' in speed_str:
#                 return float(speed_str.replace('KiB/s', '').strip()) * 1024
#             elif 'MiB/s' in speed_str:
#                 return float(speed_str.replace('MiB/s', '').strip()) * 1024 * 1024
#             elif 'GiB/s' in speed_str:
#                 return float(speed_str.replace('GiB/s', '').strip()) * 1024 * 1024 * 1024
#             else:
#                 return 0
#         except:
#             return 0


# if __name__ == "__main__":
#     import sys
#     if len(sys.argv) < 2:
#         print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python main.py <URL>")
#     else:
#         url = sys.argv[1]
#         optimizer = DynamicThreadOptimizer(url)
#         optimizer.download_video()


### manual threads
# import yt_dlp

# def download_video(url):
#     options = {
#         'format': 'bestvideo+bestaudio/best',
#         'merge_output_format': 'mp4',
#         'outtmpl': '%(title)s.%(ext)s',
#         'n_threads': 29,  # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
#         'http_chunk_size': 1048576,  # –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤ (1MB)
#         'fragment_retries': 10,  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏ —Å–±–æ–µ
#         'no_check_certificate': True,  # –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
#         'progress_hooks': [progress_hook]  # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
#     }

#     try:
#         with yt_dlp.YoutubeDL(options) as ydl:
#             ydl.download([url])
#             print("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
#     except Exception as e:
#         print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# def progress_hook(d):
#     if d['status'] == 'downloading':
#         percent = d['_percent_str'].strip()
#         speed = d['_speed_str'].strip()
#         print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}, –°–∫–æ—Ä–æ—Å—Ç—å: {speed}")

# if __name__ == "__main__":
#     import sys
#     if len(sys.argv) < 2:
#         print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python main.py <URL>")
#     else:
#         download_video(sys.argv[1])


